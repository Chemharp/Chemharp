// Chemfiles, a modern library for chemistry file reading and writing
// Copyright (C) Guillaume Fraux and contributors -- BSD license

#include <streambuf>
#include <fstream>

#include "catch.hpp"
#include "helpers.hpp"
#include "chemfiles.hpp"
using namespace chemfiles;

TEST_CASE("Read files in CIF format") {
    SECTION("Read single step") {
        // This is how I imagine most people will resolve the conflict between
        // CIF files and mmCIF files.
        auto file = Trajectory("data/cif/1544173.cif", 'r', "CIF");
        Frame frame = file.read();

        CHECK(frame.size() == 100);
	CHECK(frame.name == "1544173");

        // Check reading positions
        auto positions = frame.positions();
        CHECK(approx_eq(positions[0], Vector3D(-0.428, 5.427, 11.536), 1e-3));
        CHECK(approx_eq(positions[1], Vector3D(4.634, 11.178, 0.405), 1e-3));
	CHECK(frame[0].name == "O1");
	CHECK(frame[1].name == "O1");

        // Check the unit cell
        auto cell = frame.cell();
        CHECK(approx_eq(cell.a(), 5.9170, 1e-4));
        CHECK(approx_eq(cell.b(), 11.5030, 1e-4));
        CHECK(approx_eq(cell.c(), 12.0635, 1e-4));
        CHECK(approx_eq(cell.alpha(), 90., 1e-4));
        CHECK(approx_eq(cell.beta(), 98.153, 1e-4));
        CHECK(approx_eq(cell.gamma(), 90., 1e-4));
    }

    SECTION("Check nsteps") {
        auto file = Trajectory("data/cif/1544173.cif", 'r', "CIF");
        CHECK(file.nsteps() == 1);
    }
}

TEST_CASE("Write CIF file") {
    auto tmpfile = NamedTempPath(".cif");
    const auto EXPECTED_CONTENT =
    "# generated by Chemfiles\n"
    "#\n"
    "_cell.length_a 22.0\n"
    "_cell.length_b 22.0\n"
    "_cell.length_c 22.0\n"
    "_cell.length_alpha 90.0\n"
    "_cell.length_beta  90.0\n"
    "_cell.length_gamma 90.0\n"
    "#\n"
    "loop_\n"
    "_atom_site.group_PDB\n"
    "_atom_site.id\n"
    "_atom_site.type_symbol\n"
    "_atom_site.label_atom_id\n"
    "_atom_site.label_alt_id\n"
    "_atom_site.label_comp_id\n"
    "_atom_site.label_asym_id\n"
    "_atom_site.label_seq_id\n"
    "_atom_site.Cartn_x\n"
    "_atom_site.Cartn_y\n"
    "_atom_site.Cartn_z\n"
    "_atom_site.pdbx_formal_charge\n"
    "_atom_site.auth_asym_id\n"
    "_atom_site.pdbx_PDB_model_num\n"
    "HETATM 1     A  A    .   . .    .    1.000    2.000    3.000 0.0 . 1\n"
    "ATOM   2     B  B    . foo ?    2    1.000    2.000    3.000 0.0 . 1\n"
    "ATOM   3     C  C    . foo ?    2    1.000    2.000    3.000 0.0 . 1\n"
    "HETATM 4     D  D    . bar G    ?    1.000    2.000    3.000 0.0 A 1\n"
    "HETATM 5     A  A    .   . .    .    4.000    5.000    6.000 0.0 . 2\n"
    "ATOM   6     B  B    . foo ?    2    1.000    2.000    3.000 0.0 . 2\n"
    "ATOM   7     C  C    . foo ?    2    1.000    2.000    3.000 0.0 . 2\n"
    "HETATM 8     D  D    . bar G    ?    1.000    2.000    3.000 0.0 A 2\n";


    auto frame = Frame(UnitCell(22));
    frame.add_atom(Atom("A"), {1, 2, 3});
    frame.add_atom(Atom("B"), {1, 2, 3});
    frame.add_atom(Atom("C"), {1, 2, 3});
    frame.add_atom(Atom("D"), {1, 2, 3});

    auto file = Trajectory(tmpfile, 'w');
    file.write(frame);

    frame.positions()[0] = {4.0, 5.0, 6.0};
    file.write(frame);

    file.close();
    std::ifstream checking(tmpfile);
    std::string content((std::istreambuf_iterator<char>(checking)),
                         std::istreambuf_iterator<char>());
    CHECK(EXPECTED_CONTENT == content);
}
