// Chemfiles, a modern library for chemistry file reading and writing
// Copyright (C) Guillaume Fraux and contributors -- BSD license

#include <streambuf>
#include <fstream>

#include "catch.hpp"
#include "helpers.hpp"
#include "chemfiles.hpp"
using namespace chemfiles;

TEST_CASE("Read files in CIF format") {
    SECTION("Read single step") {
        // This is how I imagine most people will resolve the conflict between
        // CIF files and mmCIF files.
        auto file = Trajectory("data/cif/1544173.cif", 'r', "CIF");
        Frame frame = file.read();

        CHECK(frame.size() == 100);
	CHECK(frame.name == "1544173");

        // Check reading positions
        auto positions = frame.positions();
        CHECK(approx_eq(positions[0], Vector3D(-0.428, 5.427, 11.536), 1e-3));
        CHECK(approx_eq(positions[1], Vector3D(4.634, 11.178, 0.405), 1e-3));
	CHECK(frame[0].name == "O1");
	CHECK(frame[1].name == "O1");

        // Check the unit cell
        auto cell = frame.cell();
        CHECK(approx_eq(cell.a(), 5.9170, 1e-4));
        CHECK(approx_eq(cell.b(), 11.5030, 1e-4));
        CHECK(approx_eq(cell.c(), 12.0635, 1e-4));
        CHECK(approx_eq(cell.alpha(), 90., 1e-4));
        CHECK(approx_eq(cell.beta(), 98.153, 1e-4));
        CHECK(approx_eq(cell.gamma(), 90., 1e-4));
    }

    SECTION("Check nsteps") {
        auto file = Trajectory("data/cif/Zr-UiO-66-pressure.cif", 'r', "CIF");
        CHECK(file.nsteps() == 3);
    }
}

TEST_CASE("Write CIF file") {
    auto tmpfile = NamedTempPath(".cif");
    const auto EXPECTED_CONTENT =
    "data_model_0\n"
    "_audit_creation_method         'generated by Chemfiles'\n"
    "_symmetry_cell_setting         'triclinic'\n"
    "_symmetry_space_group_name_H-M 'P 1'\n"
    "_space_group_IT_number         1\n"
    "_cell_length_a 22.0\n"
    "_cell_length_b 22.0\n"
    "_cell_length_c 22.0\n"
    "_cell_angle_alpha 90.0\n"
    "_cell_angle_beta  90.0\n"
    "_cell_angle_gamma 90.0\n"
    "loop_\n"
    "  _symmetry_equiv_pos_as_xyz\n"
    "  '+x,+y,+z'\n"
    "\n"
    "loop_\n"
    "_atom_site_label\n"
    "_atom_site_type_symbol\n"
    "_atom_site_occupancy\n"
    "_atom_site_fract_x\n"
    "_atom_site_fract_y\n"
    "_atom_site_fract_z\n"
    "_atom_site_Cartn_x\n"
    "_atom_site_Cartn_y\n"
    "_atom_site_Cartn_z\n"
    "Si Si 1.0  1.0000000  2.0000000  3.0000000  1.00000  2.00000  3.00000\n"
    "C C 1.0  2.0000000  3.0000000  4.0000000  2.00000  3.00000  4.00000\n";

    auto frame = Frame(UnitCell(22));
    frame.add_atom(Atom("Si"), {1, 2, 3});
    frame.add_atom(Atom("C"), {2, 3, 4});

    auto file = Trajectory(tmpfile, 'w');
    file.write(frame);
    file.close();

    std::ifstream checking(tmpfile);
    std::string content((std::istreambuf_iterator<char>(checking)),
                         std::istreambuf_iterator<char>());
    CHECK(EXPECTED_CONTENT == content);
}
